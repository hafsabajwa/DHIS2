"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PWAUpdateManager;

var _appRuntime = require("@dhis2/app-runtime");

var _ui = require("@dhis2/ui");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _locales = _interopRequireDefault(require("../locales"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ConfirmReloadModal({
  clientsCount,
  onCancel,
  onConfirm
}) {
  return /*#__PURE__*/_react.default.createElement(_ui.Modal, {
    position: "middle"
  }, /*#__PURE__*/_react.default.createElement(_ui.ModalTitle, null, _locales.default.t('Save your data')), /*#__PURE__*/_react.default.createElement(_ui.ModalContent, null, clientsCount ? _locales.default.t("Updating will reload all {{n}} open instances of this app, and any unsaved data will be lost. Save any data you need to, then click 'Reload' when ready.", {
    n: clientsCount
  }) : // Fallback if clientsCount is unavailable:
  _locales.default.t("Updating will reload all open instances of this app, and any unsaved data will be lost. Save any data you need to, then click 'Reload' when ready.")), /*#__PURE__*/_react.default.createElement(_ui.ModalActions, null, /*#__PURE__*/_react.default.createElement(_ui.ButtonStrip, {
    end: true
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    onClick: onCancel
  }, _locales.default.t('Cancel')), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    destructive: true,
    onClick: onConfirm
  }, _locales.default.t('Reload')))));
}

ConfirmReloadModal.propTypes = {
  clientsCount: _propTypes.default.number,
  onCancel: _propTypes.default.func,
  onConfirm: _propTypes.default.func
};
/**
 * Uses the offlineInterface to check for SW updates or a first activation,
 * then prompts the user to reload the page to use the new SW and access new
 * app updates. If there are multiple tabs of this app open, there's an
 * additional warning step because all clients of the service worker will
 * reload when there's an update, which may cause data loss.
 */

function PWAUpdateManager({
  offlineInterface
}) {
  const [confirmReloadModalOpen, setConfirmReloadModalOpen] = (0, _react.useState)(false);
  const [clientsCountState, setClientsCountState] = (0, _react.useState)(null);
  const {
    show
  } = (0, _appRuntime.useAlert)(_locales.default.t("There's an update available for this app."), ({
    onConfirm
  }) => ({
    permanent: true,
    actions: [{
      label: _locales.default.t('Update and reload'),
      onClick: onConfirm
    }, {
      label: _locales.default.t('Not now'),
      onClick: () => {}
    }]
  }));

  const confirmReload = () => {
    offlineInterface.getClientsInfo().then(({
      clientsCount
    }) => {
      setClientsCountState(clientsCount);

      if (clientsCount === 1) {
        // Just one client; go ahead and reload
        offlineInterface.useNewSW();
      } else {
        // Multiple clients; warn about data loss before reloading
        setConfirmReloadModalOpen(true);
      }
    }).catch(reason => {
      // Didn't get clients info
      console.warn(reason); // Go ahead with confirmation modal with `null` as clientsCount

      setConfirmReloadModalOpen(true);
    });
  };

  (0, _react.useEffect)(() => {
    offlineInterface.checkForNewSW({
      onNewSW: () => {
        show({
          onConfirm: confirmReload
        });
      }
    });
  }, []);
  return confirmReloadModalOpen ? /*#__PURE__*/_react.default.createElement(ConfirmReloadModal, {
    onConfirm: () => offlineInterface.useNewSW(),
    onCancel: () => setConfirmReloadModalOpen(false),
    clientsCount: clientsCountState
  }) : null;
}

PWAUpdateManager.propTypes = {
  offlineInterface: _propTypes.default.shape({
    checkForNewSW: _propTypes.default.func.isRequired,
    getClientsInfo: _propTypes.default.func.isRequired,
    useNewSW: _propTypes.default.func.isRequired
  }).isRequired
};